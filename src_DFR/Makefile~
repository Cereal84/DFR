CC = g++
LIB = -lpthread 
FLAGS = -Wall
BIN = 
SOURCE = ../src/
INCLUDE = ../include/
DFR_OBJECTS = DFR.o $(SOURCE)DFR_CL.o $(SOURCE)DFR_FS.o $(SOURCE)repository.o $(SOURCE)comunication.o $(SOURCE)utility.o $(SOURCE)fs_struct_data.o

DFR : $(DFR_OBJECTS)
	$(CC) $(FLAGS) $(LIB) $(DFR_OBJECTS) -o $(BIN)DFR
	rm -f *.o $(SOURCE)*.o


DFR.o : DFR.cpp $(INCLUDE)DFR.h $(SOURCE)utility.o $(SOURCE)comunication.o $(SOURCE)DFR_FS.o $(SOURCE)repository.o $(SOURCE)fs_struct_data.o $(SOURCE)DFR_CL.o

utility.o : $(SOURCE)utility.cpp $(INCLUDE)utility.h $(INCLUDE)message_CL_DFR.h $(INCLUDE)message_FS_DFR.h

comunication.o : $(SOURCE).comunication.cpp $(INCLUDE)comunication.h

DFR_FS.o: $(SOURCE)comunication.o $(SOURCE)repository.o $(INCLUDE)DFR_FS.h $(SOURCE)DFR_FS.cpp

DFR_CL.o: $(SOURCE)comunication.o $(SOURCE)repository.o $(INCLUDE)DFR_CL.h $(SOURCE)DFR_CL.cpp

repository.o: $(SOURCE)repository.cpp  $(INCLUDE)repository.h $(SOURCE)fs_struct_data.o

fs_struct_data.o: $(SOURCE)fs_struct_data.cpp $(INCLUDE)fs_struct_data.h

clean:
	rm -f *.o $(SOURCE)*.o 

